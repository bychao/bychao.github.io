<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bychao</title>
    <description>欢迎来到我的自留地~</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 13 May 2017 18:26:58 +0800</pubDate>
    <lastBuildDate>Sat, 13 May 2017 18:26:58 +0800</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>Rocketmq1</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;一、引子&lt;/h1&gt;
&lt;p&gt;MQ是应用开发中最常用的中间件之一了，个人理解研究学习中间件有几个好处，
* 一方面对中间件特性吃的越透，应用开发过程中无论是技术方案设计、问题排错等多方面都越有裨益
* 另一方面中间件的代码经受过大业务量的考验，无论在架构设计、编码质量上都有可以学习借鉴的地方。&lt;/p&gt;

&lt;p&gt;个人对MQ的理解，就是&lt;strong&gt;两次RPC+一次存储&lt;/strong&gt;，在加上其他的一些诸如顺序消息、分布式事务、推拉模式、广播订阅等一些特性。
metaQ支持顺序消息、分布式事务、push/pull消费、组内广播，功能十分强大。
&lt;img src=&quot;https://private-alipayobjects.alipay.com/alipay-rmsdeploy-image/skylark/png/12981/fa889a4443ad8a4d.png&quot; alt=&quot;fa889a4443ad8a4d.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;rocketmq&quot;&gt;二、rocketmq部署架构图&lt;/h1&gt;
&lt;p&gt;Namesrv 名称服务，是没有状态可集群横向扩展。
1. 每个 broker 启动的时候会向 namesrv 注册
2. Producer 发送消息的时候根据 topic 获取路由到 broker 的信息
3. Consumer 根据 topic 到 namesrv 获取 topic 的路由到 broker 的信息.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/rocketmq1/rocketmq_tuopu.png&quot; height=&quot;800&quot; width=&quot;700&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;rocketmq-1&quot;&gt;三、rocketmq的特性.&lt;/h1&gt;

&lt;h2 id=&quot;msgid-&quot;&gt;msgId 格式.&lt;/h2&gt;

&lt;p&gt;msgId中包含broker地址和msg的offset，便于查找msg.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/rocketmq1/rocketmq_msg.png&quot; height=&quot;400&quot; width=&quot;800&quot; /&gt;.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;存储结构&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;所有消息存储在commitLog文件里，顺序写，随机读&lt;/li&gt;
  &lt;li&gt;Queue里记录消息在commitLog里的offset，串行方式刷盘&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这样做的好处是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;队列轻量化，单个队列的数据量非常少（为什么要队列轻量化？）&lt;/li&gt;
  &lt;li&gt;对磁盘串行访问，避免磁盘竞争，不会因为队列增加导致iowait增高&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;缺点在于：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;读变成了随机读 （优化读算法，尽量命中pageCache）&lt;/li&gt;
  &lt;li&gt;读一条消息，要先读queue再读commitLog，增加了开销&lt;/li&gt;
  &lt;li&gt;要保证queue和commitLog一致性，增加了编程复杂度&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;数据存储结构&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/rocketmq1/rocketmq_queue.png&quot; width=&quot;900&quot; height=&quot;700&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;存储目录结构.&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/rocketmq1/rocketmq_queue_struct.png&quot; width=&quot;900&quot; height=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;刷盘策略&lt;/h2&gt;
&lt;p&gt;我们知道linux写文件并不是直接写到硬盘上的，而是定期刷，这样如果机器down了，有可能尚未刷盘的消息会丢失，metaQ提供了同步/异步两种刷盘方式，按需选择吧
&lt;img src=&quot;https://private-alipayobjects.alipay.com/alipay-rmsdeploy-image/skylark/png/12981/3fcfd146c73eb54e.png&quot; alt=&quot;3fcfd146c73eb54e.png&quot; /&gt; 
&lt;img src=&quot;https://private-alipayobjects.alipay.com/alipay-rmsdeploy-image/skylark/png/12981/b2e24185237cf61d.png&quot; alt=&quot;b2e24185237cf61d.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;顺序消息&lt;/h2&gt;
&lt;p&gt;metaQ支持顺序消息，担要求producer保证消息按顺序发送到同一个queue，比如msg1、msg2、msg3三个消息，如果要顺序到达consumer，则需要在producer发送时，按照特定规则，将消息发送到同一个queue。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如何把书序消息发送到一个queue&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;普通消息是通过轮询所有队列发送，顺序消息可以根据业务id，比如相同的orderId发送同一个queue，或者同一个userId发送同一个queue.&lt;/p&gt;

&lt;p&gt;messageQueueList[orderId%messageQueueList.size()].&lt;/p&gt;

&lt;p&gt;messageQueueList[userId%messageQueueList.size()]&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;事务消息（待完善）.&lt;/h2&gt;

&lt;p&gt;事务消息采用&lt;strong&gt;二阶段&lt;/strong&gt;做法来做.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/rocketmq1/trancation_msg.png&quot; width=&quot;1200&quot; height=&quot;1000&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;pushpull&quot;&gt;push/pull消费&lt;/h2&gt;
&lt;p&gt;MQ中消费端获取消息有push、pull两种，各有利弊。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PUSH&lt;/strong&gt;：broker推送消息到consumer进行消费。这种模式下最大的问题是&lt;strong&gt;慢消费&lt;/strong&gt;的问题，如果consumer消费能力抵不上broker推送消息，broker推过来消息，consumer因为消费不了而reject或者error，如果这些消息又是不可丢弃的，可能会在broker和consumer来回“踢皮球”。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pull&lt;/strong&gt;：consumer主动去broker进行拉取。这种模式下，consumer可以按需拉取，broker甚至不需要记录消息状态，只需要维护消息偏移量。但是弊端在于consumer如果拉取不到消息，重新拉取要等多久就很难衡量了，频次低了可能消息处理不及时，频次高了对服务端可能造成损伤，同时也可能多次拉取都是空拉。&lt;/p&gt;

&lt;p&gt;MetaQ中consumer都是从broker拉消息的，为了保证接收的实时性，采用了长轮询的方式。&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;组内广播&lt;/h2&gt;
&lt;p&gt;rocketMQ支持组内广播，比如应用A有10台机器，订阅了某个topic，广播方式可以使得10台机器都收到消息。
广播的代价比较高，投递比可能达到1：1000，生产环境订阅广播消息，需要根据消息量和consumer规模严格审核评估。&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;定时消息（待完善）&lt;/h2&gt;

</description>
        <pubDate>Sat, 13 May 2017 00:00:00 +0800</pubDate>
        <link>/2017/05/rocketmq1/</link>
        <guid isPermaLink="true">/2017/05/rocketmq1/</guid>
        
        
      </item>
    
      <item>
        <title>HelloWorld</title>
        <description>&lt;p&gt;这里是bychao的自留地，欢迎你的到来&lt;/p&gt;

</description>
        <pubDate>Thu, 11 May 2017 00:00:00 +0800</pubDate>
        <link>/2017/05/helloworld/</link>
        <guid isPermaLink="true">/2017/05/helloworld/</guid>
        
        
      </item>
    
  </channel>
</rss>
